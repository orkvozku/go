/***************************************************************************
  Copyright 2021 https://github.com user @orkvozku

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
***************************************************************************/

/***************************************************************************
  This comment block is informational only and does not modify the License
  described in other comment blocks in this source and/or elsewhere (e.g.
  such as in a LICENSE file).

  You are requested to use this software for good and not evil. If you are
  unsure if your plans for good and not evil meet this request then consult
  with any of your daughters. If you do not have any such daughters, then
  choose your nicest family member who is willing as an alternative. If you
  have no such family members, then choose the nicest person in your social
  circle who is willing as an alternative.
***************************************************************************/

/***************************************************************************
  Significant portions of this source are derived from the Unicode(R)
  Character Database (UCD) retrieved from
  https://www.unicode.org/Public/UCD/latest. The UCD is copyrighted by
  Unicode, Inc. and subject to a license located at
  https://www.unicode.org/license.html.

  Unicode and the Unicode Logo are registered trademarks of Unicode, Inc.
  in the United States and other countries.
***************************************************************************/

/*
Package ubasic_test is a unit test package corresponding with package ubasic.

This package is intended to be used with the "go test" command. For more
information, consult https://pkg.go.dev/cmd/go.

Benchmarks are provided in ubasic_perf_test.go (e.g. go test -bench .).
These currently perform General_Category property tests using this package,
the unicode package, and the regexp package. For each one, there is a test
over a wide range of Unicode code points, and a narrower test covering the
ASCII range.
*/
package ubasic_test

import (
	"github.com/orkvozku/go/uni/ubasic"
	"testing"
	"unicode"
)

// ubasicTestUBasicRange describes a range of code points
type ubasicTestUBasicRange struct {
	low  rune
	high rune
}

// ubasicTestableCodeRanges describes a testable set of code points.
//
// Currently, these are all the code points defined in Unicode version
// 10.0.0 or earlier. If we allow code points that are defined in more
// recent Unicode versions, we run the risk of false failures due to the
// implementation we are testing against not supporting those code ponts.
var ubasicTestableCodeRanges = []ubasicTestUBasicRange{
	{-8192, -1}, // special case: out of range low
	{0x00, 0x377}, {0x37A, 0x37F}, {0x384, 0x38A}, {0x38C, 0x38C},
	{0x38E, 0x3A1}, {0x3A3, 0x52F}, {0x531, 0x556}, {0x559, 0x55F},
	{0x561, 0x587}, {0x589, 0x58A}, {0x58D, 0x58F}, {0x591, 0x5C7},
	{0x5D0, 0x5EA}, {0x5F0, 0x5F4}, {0x600, 0x61C}, {0x61E, 0x70D},
	{0x70F, 0x74A}, {0x74D, 0x7B1}, {0x7C0, 0x7FA}, {0x800, 0x82D},
	{0x830, 0x83E}, {0x840, 0x85B}, {0x85E, 0x85E}, {0x860, 0x86A},
	{0x8A0, 0x8B4}, {0x8B6, 0x8BD}, {0x8D4, 0x983}, {0x985, 0x98C},
	{0x98F, 0x990}, {0x993, 0x9A8}, {0x9AA, 0x9B0}, {0x9B2, 0x9B2},
	{0x9B6, 0x9B9}, {0x9BC, 0x9C4}, {0x9C7, 0x9C8}, {0x9CB, 0x9CE},
	{0x9D7, 0x9D7}, {0x9DC, 0x9DD}, {0x9DF, 0x9E3}, {0x9E6, 0x9FD},
	{0xA01, 0xA03}, {0xA05, 0xA0A}, {0xA0F, 0xA10}, {0xA13, 0xA28},
	{0xA2A, 0xA30}, {0xA32, 0xA33}, {0xA35, 0xA36}, {0xA38, 0xA39},
	{0xA3C, 0xA3C}, {0xA3E, 0xA42}, {0xA47, 0xA48}, {0xA4B, 0xA4D},
	{0xA51, 0xA51}, {0xA59, 0xA5C}, {0xA5E, 0xA5E}, {0xA66, 0xA75},
	{0xA81, 0xA83}, {0xA85, 0xA8D}, {0xA8F, 0xA91}, {0xA93, 0xAA8},
	{0xAAA, 0xAB0}, {0xAB2, 0xAB3}, {0xAB5, 0xAB9}, {0xABC, 0xAC5},
	{0xAC7, 0xAC9}, {0xACB, 0xACD}, {0xAD0, 0xAD0}, {0xAE0, 0xAE3},
	{0xAE6, 0xAF1}, {0xAF9, 0xAFF}, {0xB01, 0xB03}, {0xB05, 0xB0C},
	{0xB0F, 0xB10}, {0xB13, 0xB28}, {0xB2A, 0xB30}, {0xB32, 0xB33},
	{0xB35, 0xB39}, {0xB3C, 0xB44}, {0xB47, 0xB48}, {0xB4B, 0xB4D},
	{0xB56, 0xB57}, {0xB5C, 0xB5D}, {0xB5F, 0xB63}, {0xB66, 0xB77},
	{0xB82, 0xB83}, {0xB85, 0xB8A}, {0xB8E, 0xB90}, {0xB92, 0xB95},
	{0xB99, 0xB9A}, {0xB9C, 0xB9C}, {0xB9E, 0xB9F}, {0xBA3, 0xBA4},
	{0xBA8, 0xBAA}, {0xBAE, 0xBB9}, {0xBBE, 0xBC2}, {0xBC6, 0xBC8},
	{0xBCA, 0xBCD}, {0xBD0, 0xBD0}, {0xBD7, 0xBD7}, {0xBE6, 0xBFA},
	{0xC00, 0xC03}, {0xC05, 0xC0C}, {0xC0E, 0xC10}, {0xC12, 0xC28},
	{0xC2A, 0xC39}, {0xC3D, 0xC44}, {0xC46, 0xC48}, {0xC4A, 0xC4D},
	{0xC55, 0xC56}, {0xC58, 0xC5A}, {0xC60, 0xC63}, {0xC66, 0xC6F},
	{0xC78, 0xC83}, {0xC85, 0xC8C}, {0xC8E, 0xC90}, {0xC92, 0xCA8},
	{0xCAA, 0xCB3}, {0xCB5, 0xCB9}, {0xCBC, 0xCC4}, {0xCC6, 0xCC8},
	{0xCCA, 0xCCD}, {0xCD5, 0xCD6}, {0xCDE, 0xCDE}, {0xCE0, 0xCE3},
	{0xCE6, 0xCEF}, {0xCF1, 0xCF2}, {0xD00, 0xD03}, {0xD05, 0xD0C},
	{0xD0E, 0xD10}, {0xD12, 0xD44}, {0xD46, 0xD48}, {0xD4A, 0xD4F},
	{0xD54, 0xD63}, {0xD66, 0xD7F}, {0xD82, 0xD83}, {0xD85, 0xD96},
	{0xD9A, 0xDB1}, {0xDB3, 0xDBB}, {0xDBD, 0xDBD}, {0xDC0, 0xDC6},
	{0xDCA, 0xDCA}, {0xDCF, 0xDD4}, {0xDD6, 0xDD6}, {0xDD8, 0xDDF},
	{0xDE6, 0xDEF}, {0xDF2, 0xDF4}, {0xE01, 0xE3A}, {0xE3F, 0xE5B},
	{0xE81, 0xE82}, {0xE84, 0xE84}, {0xE87, 0xE88}, {0xE8A, 0xE8A},
	{0xE8D, 0xE8D}, {0xE94, 0xE97}, {0xE99, 0xE9F}, {0xEA1, 0xEA3},
	{0xEA5, 0xEA5}, {0xEA7, 0xEA7}, {0xEAA, 0xEAB}, {0xEAD, 0xEB9},
	{0xEBB, 0xEBD}, {0xEC0, 0xEC4}, {0xEC6, 0xEC6}, {0xEC8, 0xECD},
	{0xED0, 0xED9}, {0xEDC, 0xEDF}, {0xF00, 0xF47}, {0xF49, 0xF6C},
	{0xF71, 0xF97}, {0xF99, 0xFBC}, {0xFBE, 0xFCC}, {0xFCE, 0xFDA},
	{0x1000, 0x10C5}, {0x10C7, 0x10C7}, {0x10CD, 0x10CD},
	{0x10D0, 0x1248}, {0x124A, 0x124D}, {0x1250, 0x1256},
	{0x1258, 0x1258}, {0x125A, 0x125D}, {0x1260, 0x1288},
	{0x128A, 0x128D}, {0x1290, 0x12B0}, {0x12B2, 0x12B5},
	{0x12B8, 0x12BE}, {0x12C0, 0x12C0}, {0x12C2, 0x12C5},
	{0x12C8, 0x12D6}, {0x12D8, 0x1310}, {0x1312, 0x1315},
	{0x1318, 0x135A}, {0x135D, 0x137C}, {0x1380, 0x1399},
	{0x13A0, 0x13F5}, {0x13F8, 0x13FD}, {0x1400, 0x169C},
	{0x16A0, 0x16F8}, {0x1700, 0x170C}, {0x170E, 0x1714},
	{0x1720, 0x1736}, {0x1740, 0x1753}, {0x1760, 0x176C},
	{0x176E, 0x1770}, {0x1772, 0x1773}, {0x1780, 0x17DD},
	{0x17E0, 0x17E9}, {0x17F0, 0x17F9}, {0x1800, 0x180E},
	{0x1810, 0x1819}, {0x1820, 0x1877}, {0x1880, 0x18AA},
	{0x18B0, 0x18F5}, {0x1900, 0x191E}, {0x1920, 0x192B},
	{0x1930, 0x193B}, {0x1940, 0x1940}, {0x1944, 0x196D},
	{0x1970, 0x1974}, {0x1980, 0x19AB}, {0x19B0, 0x19C9},
	{0x19D0, 0x19DA}, {0x19DE, 0x1A1B}, {0x1A1E, 0x1A5E},
	{0x1A60, 0x1A7C}, {0x1A7F, 0x1A89}, {0x1A90, 0x1A99},
	{0x1AA0, 0x1AAD}, {0x1AB0, 0x1ABE}, {0x1B00, 0x1B4B},
	{0x1B50, 0x1B7C}, {0x1B80, 0x1BF3}, {0x1BFC, 0x1C37},
	{0x1C3B, 0x1C49}, {0x1C4D, 0x1C88}, {0x1CC0, 0x1CC7},
	{0x1CD0, 0x1CF9}, {0x1D00, 0x1DF9}, {0x1DFB, 0x1F15},
	{0x1F18, 0x1F1D}, {0x1F20, 0x1F45}, {0x1F48, 0x1F4D},
	{0x1F50, 0x1F57}, {0x1F59, 0x1F59}, {0x1F5B, 0x1F5B},
	{0x1F5D, 0x1F5D}, {0x1F5F, 0x1F7D}, {0x1F80, 0x1FB4},
	{0x1FB6, 0x1FC4}, {0x1FC6, 0x1FD3}, {0x1FD6, 0x1FDB},
	{0x1FDD, 0x1FEF}, {0x1FF2, 0x1FF4}, {0x1FF6, 0x1FFE},
	{0x2000, 0x2064}, {0x2066, 0x2071}, {0x2074, 0x208E},
	{0x2090, 0x209C}, {0x20A0, 0x20BF}, {0x20D0, 0x20F0},
	{0x2100, 0x218B}, {0x2190, 0x2426}, {0x2440, 0x244A},
	{0x2460, 0x2B73}, {0x2B76, 0x2B95}, {0x2B98, 0x2BB9},
	{0x2BBD, 0x2BC8}, {0x2BCA, 0x2BD2}, {0x2BEC, 0x2BEF},
	{0x2C00, 0x2C2E}, {0x2C30, 0x2C5E}, {0x2C60, 0x2CF3},
	{0x2CF9, 0x2D25}, {0x2D27, 0x2D27}, {0x2D2D, 0x2D2D},
	{0x2D30, 0x2D67}, {0x2D6F, 0x2D70}, {0x2D7F, 0x2D96},
	{0x2DA0, 0x2DA6}, {0x2DA8, 0x2DAE}, {0x2DB0, 0x2DB6},
	{0x2DB8, 0x2DBE}, {0x2DC0, 0x2DC6}, {0x2DC8, 0x2DCE},
	{0x2DD0, 0x2DD6}, {0x2DD8, 0x2DDE}, {0x2DE0, 0x2E49},
	{0x2E80, 0x2E99}, {0x2E9B, 0x2EF3}, {0x2F00, 0x2FD5},
	{0x2FF0, 0x2FFB}, {0x3000, 0x303F}, {0x3041, 0x3096},
	{0x3099, 0x30FF}, {0x3105, 0x312E}, {0x3131, 0x318E},
	{0x3190, 0x31BA}, {0x31C0, 0x31E3}, {0x31F0, 0x321E},
	{0x3220, 0x32FE}, {0x3300, 0x4DB5}, {0x4DC0, 0x9FEA},
	{0xA000, 0xA48C}, {0xA490, 0xA4C6}, {0xA4D0, 0xA62B},
	{0xA640, 0xA6F7}, {0xA700, 0xA7AE}, {0xA7B0, 0xA7B7},
	{0xA7F7, 0xA82B}, {0xA830, 0xA839}, {0xA840, 0xA877},
	{0xA880, 0xA8C5}, {0xA8CE, 0xA8D9}, {0xA8E0, 0xA8FD},
	{0xA900, 0xA953}, {0xA95F, 0xA97C}, {0xA980, 0xA9CD},
	{0xA9CF, 0xA9D9}, {0xA9DE, 0xA9FE}, {0xAA00, 0xAA36},
	{0xAA40, 0xAA4D}, {0xAA50, 0xAA59}, {0xAA5C, 0xAAC2},
	{0xAADB, 0xAAF6}, {0xAB01, 0xAB06}, {0xAB09, 0xAB0E},
	{0xAB11, 0xAB16}, {0xAB20, 0xAB26}, {0xAB28, 0xAB2E},
	{0xAB30, 0xAB65}, {0xAB70, 0xABED}, {0xABF0, 0xABF9},
	{0xAC00, 0xD7A3}, {0xD7B0, 0xD7C6}, {0xD7CB, 0xD7FB},
	{0xD800, 0xFA6D}, {0xFA70, 0xFAD9}, {0xFB00, 0xFB06},
	{0xFB13, 0xFB17}, {0xFB1D, 0xFB36}, {0xFB38, 0xFB3C},
	{0xFB3E, 0xFB3E}, {0xFB40, 0xFB41}, {0xFB43, 0xFB44},
	{0xFB46, 0xFBC1}, {0xFBD3, 0xFD3F}, {0xFD50, 0xFD8F},
	{0xFD92, 0xFDC7}, {0xFDD0, 0xFDFD}, {0xFE00, 0xFE19},
	{0xFE20, 0xFE52}, {0xFE54, 0xFE66}, {0xFE68, 0xFE6B},
	{0xFE70, 0xFE74}, {0xFE76, 0xFEFC}, {0xFEFF, 0xFEFF},
	{0xFF01, 0xFFBE}, {0xFFC2, 0xFFC7}, {0xFFCA, 0xFFCF},
	{0xFFD2, 0xFFD7}, {0xFFDA, 0xFFDC}, {0xFFE0, 0xFFE6},
	{0xFFE8, 0xFFEE}, {0xFFF9, 0x1000B}, {0x1000D, 0x10026},
	{0x10028, 0x1003A}, {0x1003C, 0x1003D}, {0x1003F, 0x1004D},
	{0x10050, 0x1005D}, {0x10080, 0x100FA}, {0x10100, 0x10102},
	{0x10107, 0x10133}, {0x10137, 0x1018E}, {0x10190, 0x1019B},
	{0x101A0, 0x101A0}, {0x101D0, 0x101FD}, {0x10280, 0x1029C},
	{0x102A0, 0x102D0}, {0x102E0, 0x102FB}, {0x10300, 0x10323},
	{0x1032D, 0x1034A}, {0x10350, 0x1037A}, {0x10380, 0x1039D},
	{0x1039F, 0x103C3}, {0x103C8, 0x103D5}, {0x10400, 0x1049D},
	{0x104A0, 0x104A9}, {0x104B0, 0x104D3}, {0x104D8, 0x104FB},
	{0x10500, 0x10527}, {0x10530, 0x10563}, {0x1056F, 0x1056F},
	{0x10600, 0x10736}, {0x10740, 0x10755}, {0x10760, 0x10767},
	{0x10800, 0x10805}, {0x10808, 0x10808}, {0x1080A, 0x10835},
	{0x10837, 0x10838}, {0x1083C, 0x1083C}, {0x1083F, 0x10855},
	{0x10857, 0x1089E}, {0x108A7, 0x108AF}, {0x108E0, 0x108F2},
	{0x108F4, 0x108F5}, {0x108FB, 0x1091B}, {0x1091F, 0x10939},
	{0x1093F, 0x1093F}, {0x10980, 0x109B7}, {0x109BC, 0x109CF},
	{0x109D2, 0x10A03}, {0x10A05, 0x10A06}, {0x10A0C, 0x10A13},
	{0x10A15, 0x10A17}, {0x10A19, 0x10A33}, {0x10A38, 0x10A3A},
	{0x10A3F, 0x10A47}, {0x10A50, 0x10A58}, {0x10A60, 0x10A9F},
	{0x10AC0, 0x10AE6}, {0x10AEB, 0x10AF6}, {0x10B00, 0x10B35},
	{0x10B39, 0x10B55}, {0x10B58, 0x10B72}, {0x10B78, 0x10B91},
	{0x10B99, 0x10B9C}, {0x10BA9, 0x10BAF}, {0x10C00, 0x10C48},
	{0x10C80, 0x10CB2}, {0x10CC0, 0x10CF2}, {0x10CFA, 0x10CFF},
	{0x10E60, 0x10E7E}, {0x11000, 0x1104D}, {0x11052, 0x1106F},
	{0x1107F, 0x110C1}, {0x110D0, 0x110E8}, {0x110F0, 0x110F9},
	{0x11100, 0x11134}, {0x11136, 0x11143}, {0x11150, 0x11176},
	{0x11180, 0x111CD}, {0x111D0, 0x111DF}, {0x111E1, 0x111F4},
	{0x11200, 0x11211}, {0x11213, 0x1123E}, {0x11280, 0x11286},
	{0x11288, 0x11288}, {0x1128A, 0x1128D}, {0x1128F, 0x1129D},
	{0x1129F, 0x112A9}, {0x112B0, 0x112EA}, {0x112F0, 0x112F9},
	{0x11300, 0x11303}, {0x11305, 0x1130C}, {0x1130F, 0x11310},
	{0x11313, 0x11328}, {0x1132A, 0x11330}, {0x11332, 0x11333},
	{0x11335, 0x11339}, {0x1133C, 0x11344}, {0x11347, 0x11348},
	{0x1134B, 0x1134D}, {0x11350, 0x11350}, {0x11357, 0x11357},
	{0x1135D, 0x11363}, {0x11366, 0x1136C}, {0x11370, 0x11374},
	{0x11400, 0x11459}, {0x1145B, 0x1145B}, {0x1145D, 0x1145D},
	{0x11480, 0x114C7}, {0x114D0, 0x114D9}, {0x11580, 0x115B5},
	{0x115B8, 0x115DD}, {0x11600, 0x11644}, {0x11650, 0x11659},
	{0x11660, 0x1166C}, {0x11680, 0x116B7}, {0x116C0, 0x116C9},
	{0x11700, 0x11719}, {0x1171D, 0x1172B}, {0x11730, 0x1173F},
	{0x118A0, 0x118F2}, {0x118FF, 0x118FF}, {0x11A00, 0x11A47},
	{0x11A50, 0x11A83}, {0x11A86, 0x11A9C}, {0x11A9E, 0x11AA2},
	{0x11AC0, 0x11AF8}, {0x11C00, 0x11C08}, {0x11C0A, 0x11C36},
	{0x11C38, 0x11C45}, {0x11C50, 0x11C6C}, {0x11C70, 0x11C8F},
	{0x11C92, 0x11CA7}, {0x11CA9, 0x11CB6}, {0x11D00, 0x11D06},
	{0x11D08, 0x11D09}, {0x11D0B, 0x11D36}, {0x11D3A, 0x11D3A},
	{0x11D3C, 0x11D3D}, {0x11D3F, 0x11D47}, {0x11D50, 0x11D59},
	{0x12000, 0x12399}, {0x12400, 0x1246E}, {0x12470, 0x12474},
	{0x12480, 0x12543}, {0x13000, 0x1342E}, {0x14400, 0x14646},
	{0x16800, 0x16A38}, {0x16A40, 0x16A5E}, {0x16A60, 0x16A69},
	{0x16A6E, 0x16A6F}, {0x16AD0, 0x16AED}, {0x16AF0, 0x16AF5},
	{0x16B00, 0x16B45}, {0x16B50, 0x16B59}, {0x16B5B, 0x16B61},
	{0x16B63, 0x16B77}, {0x16B7D, 0x16B8F}, {0x16F00, 0x16F44},
	{0x16F50, 0x16F7E}, {0x16F8F, 0x16F9F}, {0x16FE0, 0x16FE1},
	{0x17000, 0x187EC}, {0x18800, 0x18AF2}, {0x1B000, 0x1B11E},
	{0x1B170, 0x1B2FB}, {0x1BC00, 0x1BC6A}, {0x1BC70, 0x1BC7C},
	{0x1BC80, 0x1BC88}, {0x1BC90, 0x1BC99}, {0x1BC9C, 0x1BCA3},
	{0x1D000, 0x1D0F5}, {0x1D100, 0x1D126}, {0x1D129, 0x1D1E8},
	{0x1D200, 0x1D245}, {0x1D300, 0x1D356}, {0x1D360, 0x1D371},
	{0x1D400, 0x1D454}, {0x1D456, 0x1D49C}, {0x1D49E, 0x1D49F},
	{0x1D4A2, 0x1D4A2}, {0x1D4A5, 0x1D4A6}, {0x1D4A9, 0x1D4AC},
	{0x1D4AE, 0x1D4B9}, {0x1D4BB, 0x1D4BB}, {0x1D4BD, 0x1D4C3},
	{0x1D4C5, 0x1D505}, {0x1D507, 0x1D50A}, {0x1D50D, 0x1D514},
	{0x1D516, 0x1D51C}, {0x1D51E, 0x1D539}, {0x1D53B, 0x1D53E},
	{0x1D540, 0x1D544}, {0x1D546, 0x1D546}, {0x1D54A, 0x1D550},
	{0x1D552, 0x1D6A5}, {0x1D6A8, 0x1D7CB}, {0x1D7CE, 0x1DA8B},
	{0x1DA9B, 0x1DA9F}, {0x1DAA1, 0x1DAAF}, {0x1E000, 0x1E006},
	{0x1E008, 0x1E018}, {0x1E01B, 0x1E021}, {0x1E023, 0x1E024},
	{0x1E026, 0x1E02A}, {0x1E800, 0x1E8C4}, {0x1E8C7, 0x1E8D6},
	{0x1E900, 0x1E94A}, {0x1E950, 0x1E959}, {0x1E95E, 0x1E95F},
	{0x1EE00, 0x1EE03}, {0x1EE05, 0x1EE1F}, {0x1EE21, 0x1EE22},
	{0x1EE24, 0x1EE24}, {0x1EE27, 0x1EE27}, {0x1EE29, 0x1EE32},
	{0x1EE34, 0x1EE37}, {0x1EE39, 0x1EE39}, {0x1EE3B, 0x1EE3B},
	{0x1EE42, 0x1EE42}, {0x1EE47, 0x1EE47}, {0x1EE49, 0x1EE49},
	{0x1EE4B, 0x1EE4B}, {0x1EE4D, 0x1EE4F}, {0x1EE51, 0x1EE52},
	{0x1EE54, 0x1EE54}, {0x1EE57, 0x1EE57}, {0x1EE59, 0x1EE59},
	{0x1EE5B, 0x1EE5B}, {0x1EE5D, 0x1EE5D}, {0x1EE5F, 0x1EE5F},
	{0x1EE61, 0x1EE62}, {0x1EE64, 0x1EE64}, {0x1EE67, 0x1EE6A},
	{0x1EE6C, 0x1EE72}, {0x1EE74, 0x1EE77}, {0x1EE79, 0x1EE7C},
	{0x1EE7E, 0x1EE7E}, {0x1EE80, 0x1EE89}, {0x1EE8B, 0x1EE9B},
	{0x1EEA1, 0x1EEA3}, {0x1EEA5, 0x1EEA9}, {0x1EEAB, 0x1EEBB},
	{0x1EEF0, 0x1EEF1}, {0x1F000, 0x1F02B}, {0x1F030, 0x1F093},
	{0x1F0A0, 0x1F0AE}, {0x1F0B1, 0x1F0BF}, {0x1F0C1, 0x1F0CF},
	{0x1F0D1, 0x1F0F5}, {0x1F100, 0x1F10C}, {0x1F110, 0x1F12E},
	{0x1F130, 0x1F16B}, {0x1F170, 0x1F1AC}, {0x1F1E6, 0x1F202},
	{0x1F210, 0x1F23B}, {0x1F240, 0x1F248}, {0x1F250, 0x1F251},
	{0x1F260, 0x1F265}, {0x1F300, 0x1F6D4}, {0x1F6E0, 0x1F6EC},
	{0x1F6F0, 0x1F6F8}, {0x1F700, 0x1F773}, {0x1F780, 0x1F7D4},
	{0x1F800, 0x1F80B}, {0x1F810, 0x1F847}, {0x1F850, 0x1F859},
	{0x1F860, 0x1F887}, {0x1F890, 0x1F8AD}, {0x1F900, 0x1F90B},
	{0x1F910, 0x1F93E}, {0x1F940, 0x1F94C}, {0x1F950, 0x1F96B},
	{0x1F980, 0x1F997}, {0x1F9C0, 0x1F9C0}, {0x1F9D0, 0x1F9E6},
	{0x1FFFE, 0x2A6D6}, {0x2A700, 0x2B734}, {0x2B740, 0x2B81D},
	{0x2B820, 0x2CEA1}, {0x2CEB0, 0x2EBE0}, {0x2F800, 0x2FA1D},
	{0x2FFFE, 0x2FFFF}, {0x3FFFE, 0x3FFFF}, {0x4FFFE, 0x4FFFF},
	{0x5FFFE, 0x5FFFF}, {0x6FFFE, 0x6FFFF}, {0x7FFFE, 0x7FFFF},
	{0x8FFFE, 0x8FFFF}, {0x9FFFE, 0x9FFFF}, {0xAFFFE, 0xAFFFF},
	{0xBFFFE, 0xBFFFF}, {0xCFFFE, 0xCFFFF}, {0xDFFFE, 0xDFFFF},
	{0xE0001, 0xE0001}, {0xE0020, 0xE007F}, {0xE0100, 0xE01EF},
	{0xEFFFE, 0x10FFFF},
	{0x110000, 0x1107FF}, // special case: out of range high
}

// TestUBasic walks through ubasicTestableCodeRanges and performs tests for
// the code points within that range, comparing the results from this
// package with those of the unicode package.
func TestUBasic(t *testing.T) {
	for i := range ubasicTestableCodeRanges {
		tcr := ubasicTestableCodeRanges[i]
		for r := tcr.low; r <= tcr.high; r++ {
			// Skip over all code points that have changed their General_Category
			// since Unicode version 10.0.0, as these may produce false negatives.
			if r == 0x1734 {
				continue
			}
			// General_Category:
			testBasicCase(t, "HasGcC", r, ubasic.HasGcC(r), unicode.Is(unicode.C, r))
			testBasicCase(t, "HasGcCc", r, ubasic.HasGcCc(r), unicode.Is(unicode.Cc, r))
			testBasicCase(t, "HasGcCf", r, ubasic.HasGcCf(r), unicode.Is(unicode.Cf, r))
			// Package unicode currently does not have a test for Cn.
			testBasicCase(t, "HasGcCo", r, ubasic.HasGcCo(r), unicode.Is(unicode.Co, r))
			testBasicCase(t, "HasGcCs", r, ubasic.HasGcCs(r), unicode.Is(unicode.Cs, r))
			testBasicCase(t, "HasGcL", r, ubasic.HasGcL(r), unicode.Is(unicode.L, r))
			testBasicCase(t, "HasGcLc", r, ubasic.HasGcLc(r), unicode.In(r, unicode.Ll, unicode.Lt, unicode.Lu))
			testBasicCase(t, "HasGcLl", r, ubasic.HasGcLl(r), unicode.Is(unicode.Ll, r))
			testBasicCase(t, "HasGcLm", r, ubasic.HasGcLm(r), unicode.Is(unicode.Lm, r))
			testBasicCase(t, "HasGcLo", r, ubasic.HasGcLo(r), unicode.Is(unicode.Lo, r))
			testBasicCase(t, "HasGcLt", r, ubasic.HasGcLt(r), unicode.Is(unicode.Lt, r))
			testBasicCase(t, "HasGcLu", r, ubasic.HasGcLu(r), unicode.Is(unicode.Lu, r))
			testBasicCase(t, "HasGcM", r, ubasic.HasGcM(r), unicode.Is(unicode.M, r))
			testBasicCase(t, "HasGcMc", r, ubasic.HasGcMc(r), unicode.Is(unicode.Mc, r))
			testBasicCase(t, "HasGcMe", r, ubasic.HasGcMe(r), unicode.Is(unicode.Me, r))
			testBasicCase(t, "HasGcMn", r, ubasic.HasGcMn(r), unicode.Is(unicode.Mn, r))
			testBasicCase(t, "HasGcN", r, ubasic.HasGcN(r), unicode.Is(unicode.N, r))
			testBasicCase(t, "HasGcNd", r, ubasic.HasGcNd(r), unicode.Is(unicode.Nd, r))
			testBasicCase(t, "HasGcNl", r, ubasic.HasGcNl(r), unicode.Is(unicode.Nl, r))
			testBasicCase(t, "HasGcNo", r, ubasic.HasGcNo(r), unicode.Is(unicode.No, r))
			testBasicCase(t, "HasGcP", r, ubasic.HasGcP(r), unicode.Is(unicode.P, r))
			testBasicCase(t, "HasGcPc", r, ubasic.HasGcPc(r), unicode.Is(unicode.Pc, r))
			testBasicCase(t, "HasGcPd", r, ubasic.HasGcPd(r), unicode.Is(unicode.Pd, r))
			testBasicCase(t, "HasGcPe", r, ubasic.HasGcPe(r), unicode.Is(unicode.Pe, r))
			testBasicCase(t, "HasGcPf", r, ubasic.HasGcPf(r), unicode.Is(unicode.Pf, r))
			testBasicCase(t, "HasGcPi", r, ubasic.HasGcPi(r), unicode.Is(unicode.Pi, r))
			testBasicCase(t, "HasGcPo", r, ubasic.HasGcPo(r), unicode.Is(unicode.Po, r))
			testBasicCase(t, "HasGcPs", r, ubasic.HasGcPs(r), unicode.Is(unicode.Ps, r))
			testBasicCase(t, "HasGcS", r, ubasic.HasGcS(r), unicode.Is(unicode.S, r))
			testBasicCase(t, "HasGcSc", r, ubasic.HasGcSc(r), unicode.Is(unicode.Sc, r))
			testBasicCase(t, "HasGcSk", r, ubasic.HasGcSk(r), unicode.Is(unicode.Sk, r))
			testBasicCase(t, "HasGcSm", r, ubasic.HasGcSm(r), unicode.Is(unicode.Sm, r))
			testBasicCase(t, "HasGcSo", r, ubasic.HasGcSo(r), unicode.Is(unicode.So, r))
			testBasicCase(t, "HasGcZ", r, ubasic.HasGcZ(r), unicode.Is(unicode.Z, r))
			testBasicCase(t, "HasGcZl", r, ubasic.HasGcZl(r), unicode.Is(unicode.Zl, r))
			testBasicCase(t, "HasGcZp", r, ubasic.HasGcZp(r), unicode.Is(unicode.Zp, r))
			testBasicCase(t, "HasGcZs", r, ubasic.HasGcZs(r), unicode.Is(unicode.Zs, r))
		}
	}
}

func testBasicCase(t *testing.T, fn string, r rune, valGot, valWant bool) {
	if valGot != valWant {
		t.Errorf("TestUBasic,testBasicCase: %s(0x%02X) = %v, want %v", fn, r, valGot, valWant)
	}
}

// ubasicTestNextExtendedGraphemeClusterBreak describes
type ubasicTestExtGraphemeClusterBreak struct {
	data []rune // sample data
	egcb []int  // expected extended grapheme cluster break boundaries
}

// These constants are test code points for ubasicTestExtGraphemeClusterBreaks.
const (
	gcbCN  rune = 0x09    // Control
	gcbEX       = 0x300   // Extend
	gcbL        = 0x1100  // L
	gcbLV       = 0xAC00  // LV
	gcbLVT      = 0xAC01  // LVT
	gcbPP       = 0x600   // Prepend
	gcbRI       = 0x1F1E6 // RI
	gcbSM       = 0x903   // SpacingMark
	gcbT        = 0x11A8  // T
	gcbV        = 0x1160  // V
	gcbXX       = 0x20    // Other
	gcbZWJ      = 0x200D  // ZWJ
	extPct      = 0xA9    // Extended_Pictographic
)

// ubasicTestExtGraphemeClusterBreaks describes a set of tests for ubasic.NextExtendedGCB
// and NextExtendedGCBLen. These tests provide a slice of runes and a
// corresponding splice of ints indicating the expected break offsets.
//
// These tests are designed to walk through all the cases, GB1 through GB999,
// described in: https://www.unicode.org/reports/tr29/
var ubasicTestExtGraphemeClusterBreaks = []ubasicTestExtGraphemeClusterBreak{
	{[]rune{}, []int{}},
	{[]rune{gcbXX}, []int{1}},
	{[]rune{gcbXX, gcbXX, gcbXX}, []int{1, 2, 3}},
	// GB3, GB4, GB5:
	{[]rune{0x0D, 0x0A, 0x0A, 0x0D, 0x0D, 0x0A, gcbCN, 0x0D, gcbCN},
		[]int{2, 3, 4, 6, 7, 8, 9}},
	// GB4, GB5 override GB9, GB9a, GB9b:
	{[]rune{0x0D, 0x0A, gcbEX, 0x0D, gcbZWJ, 0x0A, gcbCN, gcbSM, gcbCN, gcbPP, gcbCN},
		[]int{2, 3, 4, 5, 6, 7, 8, 9, 10, 11}},
	// GB6:
	{[]rune{gcbL, gcbCN, gcbL, gcbL, gcbCN, gcbL, gcbV, gcbCN, gcbL, gcbLV, gcbCN, gcbL, gcbLVT, gcbCN},
		[]int{1, 2, 4, 5, 7, 8, 10, 11, 13, 14}},
	{[]rune{gcbL, gcbL, gcbL, gcbCN, gcbL, gcbL, gcbV, gcbCN, gcbL, gcbL, gcbLV, gcbCN, gcbL, gcbL, gcbLVT, gcbCN},
		[]int{3, 4, 7, 8, 11, 12, 15, 16}},
	// GB6, GB7, GB8:
	{[]rune{gcbL, gcbL, gcbV, gcbV, gcbT, gcbT, gcbCN, gcbL, gcbLV, gcbV, gcbT, gcbT, gcbCN},
		[]int{6, 7, 12, 13}},
	{[]rune{gcbL, gcbL, gcbLVT, gcbT, gcbT, gcbCN, gcbL, gcbL, gcbLVT, gcbT, gcbT, gcbEX, gcbZWJ, gcbCN},
		[]int{5, 6, 13, 14}},
	// GB9, GB9a:
	{[]rune{gcbEX}, []int{1}},
	{[]rune{gcbZWJ}, []int{1}},
	{[]rune{gcbSM}, []int{1}},
	{[]rune{gcbEX, gcbXX}, []int{1, 2}},
	{[]rune{gcbZWJ, gcbCN}, []int{1, 2}},
	{[]rune{gcbSM, gcbXX}, []int{1, 2}},
	{[]rune{gcbXX, gcbEX, gcbXX, gcbZWJ, gcbXX, gcbSM, gcbZWJ, gcbEX, gcbSM, gcbXX, gcbCN, gcbEX},
		[]int{2, 4, 9, 10, 11, 12}},
	// GB9b:
	{[]rune{gcbPP}, []int{1}},
	{[]rune{gcbPP, gcbEX}, []int{2}},
	{[]rune{gcbPP, gcbZWJ}, []int{2}},
	{[]rune{gcbPP, gcbSM}, []int{2}},
	{[]rune{gcbPP, 0x0D}, []int{1, 2}},
	{[]rune{gcbPP, 0x0A}, []int{1, 2}},
	{[]rune{gcbPP, gcbCN}, []int{1, 2}},
	{[]rune{gcbPP, gcbXX}, []int{2}},
	{[]rune{gcbPP, gcbPP, gcbXX, gcbPP, gcbL, gcbL, gcbLVT, gcbT, gcbT, gcbCN},
		[]int{3, 9, 10}},
	// GB11:
	{[]rune{extPct, extPct, extPct, gcbZWJ, extPct, extPct, gcbEX, gcbZWJ, extPct},
		[]int{1, 2, 5, 9}},
	{[]rune{extPct, gcbEX, gcbEX, gcbEX, gcbZWJ, extPct, extPct, gcbEX, gcbZWJ, extPct, gcbEX},
		[]int{6, 11}},
	{[]rune{gcbPP, extPct, gcbEX, gcbEX, gcbZWJ, extPct, gcbZWJ, gcbEX, gcbSM, gcbXX},
		[]int{9, 10}},
	// GB11 (incomplete pattern):
	{[]rune{extPct, gcbXX}, []int{1, 2}},
	{[]rune{extPct, gcbEX, gcbXX}, []int{2, 3}},
	{[]rune{extPct, gcbEX, gcbEX, gcbXX}, []int{3, 4}},
	{[]rune{extPct, gcbZWJ, gcbXX}, []int{2, 3}},
	{[]rune{extPct, gcbEX, gcbZWJ, gcbXX}, []int{3, 4}},
	{[]rune{extPct, gcbEX, gcbEX, gcbZWJ, gcbXX}, []int{4, 5}},
	// GB12, GB13:
	{[]rune{gcbRI}, []int{1}},
	{[]rune{gcbRI, gcbRI}, []int{2}},
	{[]rune{gcbRI, gcbRI, gcbRI}, []int{2, 3}},
	{[]rune{gcbRI, gcbRI, gcbRI, gcbRI}, []int{2, 4}},
	{[]rune{gcbRI, gcbRI, gcbRI, gcbRI, gcbRI}, []int{2, 4, 5}},
	{[]rune{gcbXX, gcbRI}, []int{1, 2}},
	{[]rune{gcbXX, gcbRI, gcbRI}, []int{1, 3}},
	{[]rune{gcbXX, gcbRI, gcbRI, gcbRI}, []int{1, 3, 4}},
	{[]rune{gcbXX, gcbRI, gcbRI, gcbRI, gcbRI}, []int{1, 3, 5}},
	{[]rune{gcbXX, gcbRI, gcbRI, gcbRI, gcbRI, gcbRI}, []int{1, 3, 5, 6}},
	{[]rune{gcbXX, gcbRI, gcbEX}, []int{1, 3}},
	{[]rune{gcbXX, gcbRI, gcbRI, gcbZWJ}, []int{1, 4}},
	{[]rune{gcbXX, gcbRI, gcbRI, gcbRI, gcbSM}, []int{1, 3, 5}},
	{[]rune{gcbXX, gcbRI, gcbRI, gcbRI, gcbRI, gcbEX, gcbZWJ, gcbSM}, []int{1, 3, 8}},
	{[]rune{gcbXX, gcbRI, gcbRI, gcbRI, gcbRI, gcbRI, gcbZWJ, gcbEX}, []int{1, 3, 5, 8}},
	{[]rune{gcbXX, gcbRI, gcbRI, gcbRI, gcbRI, gcbSM, gcbZWJ, gcbEX}, []int{1, 3, 8}},
}

// TestExtGraphemeClusterBreak runs through the test cases described in
// ubasicTestExtGraphemeClusterBreaks.
func TestExtGraphemeClusterBreak(t *testing.T) {
	for i := range ubasicTestExtGraphemeClusterBreaks {
		tegcb := &ubasicTestExtGraphemeClusterBreaks[i]
		dataOffset := 0
		egcbOffset := 0
		for {
			delta1, isMand1 := ubasic.NextExtGraphemeClusterBreak(tegcb.data, dataOffset)
			delta2, isMand2 := ubasic.NextExtGraphemeClusterBreakLen(tegcb.data, dataOffset, len(tegcb.data))
			if delta1 != delta2 {
				t.Errorf("ExtGraphemeClusterBreak: i=%d, offset=%d: conflicting results: %d and %d", i, dataOffset, delta1, delta2)
			}
			if !isMand1 || !isMand2 {
				t.Errorf("ExtGraphemeClusterBreak: i=%d, offset=%d: isMandatory = true, want false", i, dataOffset)
			}
			if delta1 == 0 && egcbOffset < len(tegcb.egcb) {
				t.Errorf("ExtGraphemeClusterBreak: i=%d, offset=%d: = 0, want %d", i, dataOffset, tegcb.egcb[egcbOffset]-dataOffset)
				break
			}
			if delta1 != 0 {
				if delta1 != 0 && egcbOffset >= len(tegcb.egcb) {
					t.Errorf("ExtGraphemeClusterBreak: i=%d, offset=%d: = %d, want 0", i, dataOffset, delta1)
					break
				}
				if delta1+dataOffset != tegcb.egcb[egcbOffset] {
					t.Errorf("ExtGraphemeClusterBreak: i=%d, offset=%d: = %d, want %d", i, dataOffset, delta1, tegcb.egcb[egcbOffset]-dataOffset)
					break
				}
				dataOffset += delta1
				egcbOffset++
				break
			}
			break
		}
	}
}
